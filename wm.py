# ip_proof_dashboard.py (Streamlit App with Auth, Stripe, Dashboard)

import streamlit as st
import hashlib
import datetime
from fpdf import FPDF
import io
import psycopg2
import pandas as pd
import stripe
import requests
from dotenv import load_dotenv
from streamlit_auth0 import login_button
import streamlit as st
import os

load_dotenv()
# ----- CONFIGURATION -----
stripe.api_key=os.getenv("api_key")

DATABASE = {
    "dbname": os.getenv("DB_NAME"),
    "user": os.getenv("DB_USER"),
    "password": os.getenv("DB_PASSWORD"),
    "host": os.getenv("DB_HOST", "localhost"),
    "port": os.getenv("DB_PORT", "5432")
}# ip_proof_dashboard.py

import streamlit as st
import hashlib, datetime, io, os
import psycopg2, pandas as pd, stripe, requests
from dotenv import load_dotenv
from fpdf import FPDF
from streamlit_auth0 import login_button

# ---------- CONFIG (MUST BE FIRST STREAMLIT CALL) ----------
st.set_page_config(page_title="IPLOCAL Dashboard", layout="wide")
load_dotenv()

# Stripe + DB settings
stripe.api_key = os.getenv("STRIPE_API_KEY")
DATABASE = {
    "dbname": os.getenv("DB_NAME"),
    "user": os.getenv("DB_USER"),
    "password": os.getenv("DB_PASSWORD"),
    "host": os.getenv("DB_HOST", "localhost"),
    "port": os.getenv("DB_PORT", "5432")
}

# ---------- LOGIN ----------
result = login_button(client_id="Y39100126550-jcg8usii85nfdneeslqadc6ruiubph8e.apps.googleusercontent.com", domain="https://iplocal.streamlit.app")


if result:
    st.session_state['email'] = result.get("user", {}).get("email", "unknown")
else:
    st.warning("Please log in with Google to use the app.")
    st.stop()

# ---------- NAVIGATION ----------
page = st.sidebar.radio("Go to", ["📤 Upload File", "📊 Dashboard", "💳 Pricing"])

# ---------- PAGES ----------
if page == "📤 Upload File":
    st.title("📜 IP Proof & Timestamp Generator")
    # ... upload code ...

elif page == "📊 Dashboard":
    st.title("📊 Certificate Dashboard")
    # ... dashboard code ...

elif page == "💳 Pricing":
    st.title("💳 Subscription Plans")
    # ... stripe code ...

def get_connection():
    return psycopg2.connect(**DATABASE)

# ----- FUNCTION: ADD FIELD TO PDF -----
def add_field(pdf, label, value, font_size=12, multiline=False):
    pdf.set_font("Helvetica", style="B", size=font_size)
    pdf.set_text_color(30, 30, 30)
    pdf.cell(0, 8, f"{label}", ln=True)
    pdf.set_font("Helvetica", size=font_size)
    pdf.set_text_color(80, 80, 80)
    if multiline:
        pdf.multi_cell(0, 8, value)
    else:
        pdf.cell(0, 8, value, ln=True)
    pdf.ln(4)

# ----- PAGE 1: UPLOAD FILE -----
if page == "📤 Upload File":
    st.title("📜 IP Proof & Timestamp Generator")

    uploaded_file = st.file_uploader("Upload your file (any type)", type=None)

    if uploaded_file:
        file_bytes = uploaded_file.read()
        file_name = uploaded_file.name
        file_hash = hashlib.sha256(file_bytes).hexdigest()
        timestamp = datetime.datetime.utcnow()

        # Generate PDF
        pdf = FPDF()
        pdf.add_page()
        pdf.set_font("Helvetica", style="B", size=18)
        pdf.set_text_color(0, 51, 102)
        pdf.cell(0, 15, "IP Timestamp Proof Certificate", ln=True, align="C")
        pdf.line(10, 25, 200, 25)
        pdf.ln(15)
        add_field(pdf, "Filename:", file_name)
        add_field(pdf, "Hash (SHA256):", file_hash, font_size=10, multiline=True)
        add_field(pdf, "Timestamp:", timestamp.strftime("%Y-%m-%d %H:%M:%S UTC"))
        add_field(pdf, "User Gmail:", st.session_state.email)
        pdf.ln(5)
        pdf.set_font("Helvetica", size=12)
        pdf.set_fill_color(230, 240, 255)
        pdf.set_draw_color(200, 220, 240)
        pdf.multi_cell(0, 10, "This document certifies that the above file was uploaded and hashed at the stated time.", border=1, fill=True)
        pdf.ln(12)
        pdf.set_font("Helvetica", style="B", size=12)
        pdf.set_text_color(0, 102, 153)
        pdf.cell(0, 10, "Generated by IPLOCAL", ln=True, align="R")

        # Save PDF
        buffer = io.BytesIO()
        pdf_bytes = pdf.output(dest='S').encode('latin1')
        buffer.write(pdf_bytes)
        buffer.seek(0)

        # Store to DB
        conn = get_connection()
        cur = conn.cursor()
        cur.execute("""
            INSERT INTO certificates (filename, file_hash, timestamp_utc, user_email, pdf_data)
            VALUES (%s, %s, %s, %s, %s)
        """, (file_name, file_hash, timestamp, st.session_state.email, buffer.getvalue()))
        conn.commit()
        cur.close()
        conn.close()

        st.success("✅ Certificate generated!")
        st.download_button("📥 Download PDF", buffer, file_name=f"proof_{file_name}.pdf", mime="application/pdf")

# ----- PAGE 2: DASHBOARD -----
elif page == "📊 Dashboard":
    st.title("📊 Certificate Dashboard")

    with get_connection() as conn:
        df = pd.read_sql("SELECT id, filename, file_hash, timestamp_utc, user_email FROM certificates ORDER BY timestamp_utc DESC", conn)

    st.markdown("### Search Certificates")
    col1, col2 = st.columns(2)
    search_text = col1.text_input("Search filename, hash or email")
    date_range = col2.date_input("Filter by date", [])

    if search_text:
        df = df[df.apply(lambda row: search_text.lower() in row.astype(str).str.lower().to_string(), axis=1)]

    if len(date_range) == 2:
        start, end = date_range
        df = df[(df['timestamp_utc'] >= pd.to_datetime(start)) & (df['timestamp_utc'] <= pd.to_datetime(end))]

    st.dataframe(df, use_container_width=True)

    selected_id = st.selectbox("Select a certificate to download", df["id"].tolist())
    if st.button("📥 Download Selected PDF"):
        with get_connection() as conn:
            cur = conn.cursor()
            cur.execute("SELECT pdf_data FROM certificates WHERE id = %s", (selected_id,))
            pdf_blob = cur.fetchone()[0]
            st.download_button("Download PDF", data=pdf_blob, file_name=f"certificate_{selected_id}.pdf", mime="application/pdf")

# ----- PAGE 3: STRIPE PRICING -----
elif page == "💳 Pricing":
    st.title("💳 Subscription Plans")

    # Plan details
    plans = {
        "Free": {
            "id": "price_id_free",
            "features": [
                "🔓 Access 3 watermarking credits/month",
                "🖼️ Upload up to 3 images at once",
                "📄 Basic PDF download",
                "🔍 Limited support",
                "🌐 No logo customization"
            ]
        },
        "Pro": {
            "id": "price_id_pro",
            "features": [
                "⚡ 200 watermarking credits/month",
                "🖼️ Bulk image upload (up to 20)",
                "✅ Logo and text watermarking",
                "📥 Priority PDF downloads",
                "💬 Email support"
            ]
        },
        "Premium": {
            "id": "price_id_premium",
            "features": [
                "🚀 Unlimited watermarking",
                "🖼️ Unlimited image upload",
                "🎨 Full logo customization",
                "📁 Cloud file verification",
                "🛡️ IP + request tracking dashboard",
                "🧑‍💻 Priority customer support"
            ]
        }
    }

    # Show plans side by side
    st.subheader("Compare Plans")
    cols = st.columns(3)
    for idx, (plan_name, plan_data) in enumerate(plans.items()):
        with cols[idx]:
            st.markdown(f"### {plan_name}")
            for feature in plan_data["features"]:
                st.markdown(f"- {feature}")

    # Plan selection and Stripe integration
    plan_choice = st.radio("Choose a plan", list(plans.keys()))
    if st.button("Subscribe via Stripe"):
        stripe.api_key = "your_stripe_secret_key"
        session = stripe.checkout.Session.create(
            payment_method_types=["card"],
            line_items=[{
                "price": plans[plan_choice]["id"],
                "quantity": 1
            }],
            mode="subscription",
            success_url="https://yourdomain.com/success",
            cancel_url="https://yourdomain.com/cancel",
            customer_email=st.session_state.get("email", "test@example.com")
        )
        st.markdown(f"[👉 Click here to complete payment]({session.url})", unsafe_allow_html=True)

