import streamlit as st
import hashlib
import datetime
from fpdf import FPDF
import io

st.set_page_config(
    page_title="CYBERLOGOS-Ip Verification",
    layout="centered",
    initial_sidebar_state="auto",
)

st.title("üìú IP Proof & Timestamp Generator")

# Upload file
uploaded_file = st.file_uploader("Upload your file (any type)", type=None)

# Generate SHA256 + Timestamp + PDF
if uploaded_file:
    # Read file bytes
    file_bytes = uploaded_file.read()
    file_name = uploaded_file.name

    # Generate SHA256 hash
    file_hash = hashlib.sha256(file_bytes).hexdigest()

    # Generate UTC timestamp
    timestamp = datetime.datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S UTC")

    # Display results
    st.success("‚úÖ File processed successfully!")
    st.code(f"Filename: {file_name}\nSHA256 Hash: {file_hash}\nTimestamp: {timestamp}", language="text")

    # Generate PDF certificate in memory
    pdf = FPDF()
    pdf.add_page()

    # Title styling
    pdf.set_font("Helvetica", style="B", size=18)
    pdf.set_text_color(0, 51, 102)  # Dark blue
    pdf.cell(0, 15, "IP Timestamp Proof Certificate", ln=True, align="C")

    # Decorative line
    pdf.set_draw_color(0, 51, 102)
    pdf.set_line_width(0.8)
    pdf.line(10, 25, 200, 25)

    pdf.ln(15)

    # Section: File Information
    def add_field(label, value, font_size=12, multiline=False):
        pdf.set_font("Helvetica", style="B", size=font_size)
        pdf.set_text_color(30, 30, 30)
        pdf.cell(0, 8, f"{label}", ln=True)

        pdf.set_font("Helvetica", size=font_size)
        pdf.set_text_color(80, 80, 80)
        if multiline:
            pdf.multi_cell(0, 8, value)
        else:
            pdf.cell(0, 8, value, ln=True)
        pdf.ln(4)

    # Add fields
    add_field("Filename:", file_name)
    add_field("Hash (SHA256):", file_hash, font_size=10, multiline=True)
    add_field("Timestamp:", timestamp)
    st.markdown("### üìå File SHA256 Hash")
    st.code(file_hash, language='text') 

    # Certification message
    pdf.ln(5)
    pdf.set_font("Helvetica", style="", size=12)
    pdf.set_text_color(50, 50, 50)
    pdf.set_fill_color(230, 240, 255)
    pdf.set_draw_color(200, 220, 240)
    pdf.multi_cell(0, 10, "This document certifies that the above file was uploaded and hashed at the stated time.", border=1, fill=True)

    # Footer highlight
    pdf.ln(12)
    pdf.set_font("Helvetica", style="B", size=12)
    pdf.set_text_color(0, 102, 153)
    pdf.cell(0, 10, "Generated by CYBERLOGOS", ln=True, align="R")

    # Save file
    pdf_buffer = io.BytesIO()
    pdf.output(pdf_buffer)
    pdf_bytes = pdf_buffer.getvalue()
    
    # Display download button
    st.download_button(
        label="üì• Download Proof Certificate (PDF)",
        data=pdf_bytes,
        file_name=f"proof_{file_name}.pdf",
        mime="application/pdf"
    )
# Optional: File re-verification section
st.markdown(
    '<h3 style="color:#003366;">üîç Verify a Previously Timestamped File</h3>',
    unsafe_allow_html=True
)

verify_file = st.file_uploader("Re-upload original file to verify hash", key="verify")
verify_hash = st.text_input("Enter the original SHA256 hash to verify against")

if verify_file and verify_hash:
    check_bytes = verify_file.read()
    check_hash = hashlib.sha256(check_bytes).hexdigest()
    
    if check_hash == verify_hash.strip():
        st.success("‚úÖ Match: File is authentic and unchanged.")
    else:
        st.error("‚ùå Mismatch: File hash does not match the original.")
